#!/bin/sh

KEYDIR=~/.jfpg

if [ ! -d $KEYDIR ]; then
	mkdir $KEYDIR
fi

encrypt() {
	
	FILE=`zenity --file-selection --width=800 --height=600 --filename=~/`
	if [ -z $FILE ]; then
		zenity --error --text="No file specified"
		return 1	
	fi

	RECIP=`zenity --entry --text="Enter recipient ID"`
	if [ -z $RECIP ]; then
		zenity --error --text="No recipient specified"
		return 1	
	fi

	PUBKEY=$KEYDIR/$RECIP-pubkey.curve25519
	if [ ! -e $PUBKEY ]; then
		zenity --error --text="Could not find recipient's public key"
		return 1
	fi

	SENDER=`zenity --entry --text="Enter sender ID"`
	if [ -z $SENDER ]; then
		zenity --error --text="No sender specified"
		return 1	
	fi

	SECKEY=$KEYDIR/$SENDER-secretkey.curve25519
	if [ ! -e $SECKEY ]; then
		zenity --error --text="Could not find sender secret key"
		return 1	
	fi

	if jfpg -e -f "$FILE" -p $PUBKEY -k $SECKEY; then
		zenity --info --text="$FILE encrypted"
		return 1 
	else
		zenity --error --text="Encryption of $FILE failed"
		return 1
	fi
	return 1
}

decrypt() {
	FILE=`zenity --file-selection --width=800 --height=600 --filename=~/`
        if [ -z $FILE ]; then
                zenity --error --text="No file specified"
                return 1
        fi

        RECIP=`zenity --entry --text="Enter recipient ID"`
        if [ -z $RECIP ]; then
                zenity --error --text="No recipient specified"
                return 1
        fi

	SECKEY=$KEYDIR/$RECIP-secretkey.curve25519
	if [ ! -e $SECKEY ]; then
		zenity --error --text="Could not find recipient's secret key"
		return 1
	fi

        SENDER=`zenity --entry --text="Enter sender ID"`
        if [ -z $SENDER ]; then
                zenity --error --text="No sender specified"
                return 1
        fi

	PUBKEY=$KEYDIR/$SENDER-pubkey.curve25519	
	if [ ! -e $PUBKEY ]; then
		zenity --error --text="Could not find sender's public key"
		return 1
	fi

	if jfpg -d -f "$FILE" -p $PUBKEY -k $SECKEY; then
		zenity --info --text="$FILE decrypted"
		return 1
	else
		zenity --error --text="Decryption of $FILE failed"
		return 1
	fi
	return 1
}

sign() {
	FILE=`zenity --file-selection --width=800 --height=600 --filename=~/`
	if [ -z $FILE ]; then
		zenity --error --text="No file specified"
		return 1
	fi

	SIGN_ID=`zenity --entry --text="Enter signer's ID"`
	if [ -z $SIGN_ID ]; then
		zenity --error --text="No signer ID specified"
		return 1
	fi

	SECKEY=$KEYDIR/$SIGN_ID-signing-secretkey.ed25519
	if [ ! -e $SECKEY ]; then
		zenity --error --text="Could not find signerr's secret key"
		return 1
	fi

	if jfpg -s -f "$FILE" -x $SECKEY; then
		zenity --info --text="$FILE signed"
		return 1
	else
		zenity --error --text="Signing of $FILE failed"
		return 1
	fi
	return 1
}

verify() {
	FILE=`zenity --file-selection --width=800 --height=600 --filename=~/`
	if [ -z $FILE ]; then
		zenity --error --text="No file specified"
		return 1
	fi

	SIGN_ID=`zenity --entry --text="Enter signer's ID"`
	if [ -z $SIGN_ID ]; then
		zenity --error --text="No signer ID specified"
		return 1
	fi

	PUBKEY=$KEYDIR/$SIGN_ID-signing-pubkey.ed25519
	if [ ! -e $PUBKEY ]; then
		zenity --error --text="Could not find signer's public key"
		return 1
	fi

	if jfpg -v -f "$FILE" -x $PUBKEY; then
		zenity --info --text="Good signature from $SIGN_ID"
		return 1
	else
		zenity --error --text="Verification of $FILE failed"
		return 1
	fi
	return 1
}

new_keypair() {
	ID=`zenity --entry --text="Enter new key ID without spaces"`
	if [ -z $ID ]; then
		zenity --error --text="No ID specified"
		return 1
	fi
	
	cd $KEYDIR
	if jfpg -n $ID; then
		zenity --info --text="Created keys for $ID in $KEYDIR"
		return 1
	else
		zenity --info --text="Key generation failed"
		return 1
	fi 
	return 1
}

list_keys() {
	ls -1 $KEYDIR | zenity --list --width=800 --height=600 \
			--title="$KEYDIR" --column="Keys"
	return 1
}	

delete_keys() {
	KEYLIST=`ls -1 $KEYDIR | zenity --list --width=800 --height=600 \
		 --column="Keys" --separator=' ' --multiple`
	if [ -z $KEYLIST ]; then
		zenity --info --text="No keys specified for deletion"
		return 1
	fi

	for i in $KEYLIST; do
		rm $KEYDIR/$i
	done | zenity --progress --pulsate --auto-close
	zenity --info --text="Done deleting keys"
	return 1
}

menu() {
	CHOICE=`zenity --list --width=800 --height=600 \
        	--title="JFPG" --column="What to do?" \
        	"Encrypt" "Decrypt" "Sign" "Verify" "New Keypair" \
        	"List Keys" "Delete Keys"`

	if [ -z $CHOICE ]; then
		exit 0
	fi

	case $CHOICE in
        	"Encrypt") encrypt;;
		"Decrypt") decrypt;;
        	"Sign") sign;;
        	"Verify") verify;;
        	"New Keypair") new_keypair;;
        	"List Keys") list_keys;;
        	"Delete Keys") delete_keys;;
	esac
}
while [ "$?" ]; do
	menu
done
